// automatically generated by Xtext
grammar se.gu.cse.idxse.bomi.text.Bomi with org.eclipse.xtext.common.Terminals

import "http://www.gu.se/bomi" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

BOMIModel returns BOMIModel:
	{BOMIModel}
		('boRoleInteractions' '{' boRoleInteractions+=BORoleInteraction ( "," boRoleInteractions+=BORoleInteraction)* '}' )?
		('boundaryObjects' '{' boundaryObjects+=BoundaryObject ( "," boundaryObjects+=BoundaryObject)* '}' )?
		('roles' '{' roles+=Role ( "," roles+=Role)* '}' )?
		('boMiCoordinations' '{' boMiCoordinations+=BOMICoordination ( "," boMiCoordinations+=BOMICoordination)* '}' )?
		('methodologicalIslands' '{' methodologicalIslands+=MethodologicalIsland ( "," methodologicalIslands+=MethodologicalIsland)* '}' )?
		('governanceTeams' '{' governanceTeams+=GovernanceTeam ( "," governanceTeams+=GovernanceTeam)* '}' )?
		('boTeamGovernances' '{' boTeamGovernances+=BOTeamGovernance ( "," boTeamGovernances+=BOTeamGovernance)* '}' )?
		('drivers' '{' drivers+=Driver ( "," drivers+=Driver)* '}' )?
	;









BORoleInteraction returns BORoleInteraction:
	{BORoleInteraction}
	'BORoleInteraction'
	name=EString
	'{'
		('purpose' purpose=EString)?
		('accessability' accessability=HighLow)?
		('stability' stability=HighLow)?
		('criticality' criticality=HighLow)?
		('fitForPurpose' fitForPurpose=HighLow)?
		('interactionKinds' '{' interactionKinds+=InteractionKind ( "," interactionKinds+=InteractionKind)* '}' )?
		('boundaryObjects' '(' boundaryObjects+=[BoundaryObject|EString] ( "," boundaryObjects+=[BoundaryObject|EString])* ')' )?
		('roles' '(' roles+=[Role|EString] ( "," roles+=[Role|EString])* ')' )?
	'}';

BoundaryObject returns BoundaryObject:
	{BoundaryObject}
	'BoundaryObject'
	name=EString
	'{'
		('purpose' purpose=EString)?
		('superTypes' '{' superTypes+=BOSuperType ( "," superTypes+=BOSuperType)* '}' )?
		('levelOfDetail' levelOfDetail=HighLow)?
		('frequencyOfChange' frequencyOfChange=HighLow)?
		('modularity' modularity=HighLow)?
		('maintainability' maintainability=HighLow)?
		('prescriptive' prescriptive=HighLow)?
		('lifecycleStages' '{' lifecycleStages+=LifecycleStage ( "," lifecycleStages+=LifecycleStage)* '}' )?
		('representationFormat' representationFormat=EString)?
		('tooling' tooling=EString)?
		('versioning' versioning=EString)?
		('upToDate' upToDate=EString)?
		('internalConsistency' internalConsistency=HighLow)?
		('externalConsistency' externalConsistency=HighLow)?
	'}';

Role returns Role:
	{Role}
	'Role'
	name=EString
	'{'
		('partOfGovernanceTeams' '(' partOfGovernanceTeams+=[GovernanceTeam|EString] ( "," partOfGovernanceTeams+=[GovernanceTeam|EString])* ')' )?
		('partOfMIs' '(' partOfMIs+=[MethodologicalIsland|EString] ( "," partOfMIs+=[MethodologicalIsland|EString])* ')' )?
	'}';

BOMICoordination returns BOMICoordination:
	{BOMICoordination}
	'BOMICoordination'
	name=EString
	'{'
		('purpose' purpose=EString)?
		('accessability' accessability=HighLow)?
		('stability' stability=HighLow)?
		('criticality' criticality=HighLow)?
		('fitForPurpose' fitForPurpose=HighLow)?
		('boundaryObjects' '(' boundaryObjects+=[BoundaryObject|EString] ( "," boundaryObjects+=[BoundaryObject|EString])* ')' )?
		('methodologicalIslands' '(' methodologicalIslands+=[MethodologicalIsland|EString] ( "," methodologicalIslands+=[MethodologicalIsland|EString])* ')' )?
	'}';

MethodologicalIsland returns MethodologicalIsland:
	{MethodologicalIsland}
	'MethodologicalIsland'
	name=EString
	'{'
		('type' type=MIType)?
		('partOfMIs' '(' partOfMIs+=[MethodologicalIsland|EString] ( "," partOfMIs+=[MethodologicalIsland|EString])* ')' )?
	'}';

GovernanceTeam returns GovernanceTeam:
	{GovernanceTeam}
	'GovernanceTeam'
	name=EString;

BOTeamGovernance returns BOTeamGovernance:
	{BOTeamGovernance}
	'BOTeamGovernance'
	name=EString
	'{'
		('purpose' purpose=EString)?
		('coordinationMechanism' coordinationMechanism=EString)?
		('frequencyOfCoordination' frequencyOfCoordination=HighLow)?
		('boundaryObjects' '(' boundaryObjects+=[BoundaryObject|EString] ( "," boundaryObjects+=[BoundaryObject|EString])* ')' )?
		('governanceTeams' '(' governanceTeams+=[GovernanceTeam|EString] ( "," governanceTeams+=[GovernanceTeam|EString])* ')' )?
	'}';

Driver returns Driver:
	{Driver}
	'Driver'
	name=EString
	'{'
		('driverTypes' '{' driverTypes+=DriverType ( "," driverTypes+=DriverType)* '}' )?
		('distanceTypes' '{' distanceTypes+=DistanceType ( "," distanceTypes+=DistanceType)* '}' )?		
		('distanceSize' distanceSize=HighLow)?
		('drivesMIs' '(' drivesMIs+=[MethodologicalIsland|EString] ( "," drivesMIs+=[MethodologicalIsland|EString])* ')' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

enum HighLow returns HighLow:
				NOT_SET = 'NOT_SET' | High = 'High' | Medium = 'Medium' | Low = 'Low';

enum InteractionKind returns InteractionKind:
				IsResponsibleFor = 'IsResponsibleFor' | Creates = 'Creates' | Reads = 'Reads' | Updates = 'Updates' | Deletes = 'Deletes';

enum BOSuperType returns BOSuperType:
				Standard = 'Standard' | Technology = 'Technology' | Task = 'Task' | Planning = 'Planning' | Value = 'Value' | Product = 'Product' | Other = 'Other';

enum LifecycleStage returns LifecycleStage:
				Planning = 'Planning' | Operation = 'Operation' | Deprecate = 'Deprecate' | Retire = 'Retire';

enum MIType returns MIType:
				NOT_SET = 'NOT_SET' | Teams = 'Teams' | Silos = 'Silos' | Departments = 'Departments' | Organizations = 'Organizations';
				
enum DriverType returns DriverType:
				Technology = 'Technology' | Process = 'Process' | Organizational = 'Organizational';				

enum DistanceType returns DistanceType:
				Cultural = 'Cultural' | Geographical = 'Geographical' | Organizational = 'Organizational';
